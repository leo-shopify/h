# Created 2017-07-17 Mon 23:39
#+OPTIONS: toc:nil title:nil
#+AUTHOR: leonardo rojas

* jsx without react
Even if react is not used in a project you can still take advantage of [[https://babeljs.io/docs/plugins/transform-react-jsx/][jsx]]
syntax if you are using [[https://babeljs.io/][babel]].

** Sample
Fist we have to tell babel what function to use to compile jsx:
#+NAME: h-header
#+BEGIN_SRC js
  /** @jsx h */
#+END_SRC

Then we can start using jsx syntax and in this case output to DOM:
#+NAME: sample-h-src
#+BEGIN_SRC js
  function Title(attr, str) {
    return <h1>{str.toUpperCase()}</h1>;
  }
  
  function Author(attr, ...name) {
    return <a href={`mailto:${attr.email}`}>{name}</a>;
  }
  
  const body = (<header>
  	      <Title>Santa Maradona</Title>
  	      <Author email="mano.negra@example.com">Mano <strong>Negra</strong></Author>
  	      </header>);
  
  document.body.appendChild(body);
#+END_SRC

While babel can compile the script as is, a runtime definition of ~h~ is
needed:
#+NAME: define-h
#+BEGIN_SRC js
  function h(node, attributes, ...children) {
    if (typeof node === 'function') {
      return node(attributes, ...children);
    }
  
    let element;
  
    if (typeof node === 'string') {
      element = document.createElement(node);
    } else if (typeof node.appendChild === 'function') {
      element = node;
    } else {
      throw new TypeError('node must be a String or an object that implements appendChild');
    }
  
    if (attributes) {
      Object.keys(attributes).forEach(k => k === '$'
  				    ? Object.assign(element, attributes.$)
  				    : element.setAttribute(k, attributes[k]) );
    }
  
    return children == null ? element : children.reduce(recurse, element);
  }
  
  function recurse(node, item) {
    let child;
    if (Array.isArray(item)) { child = item.reduce(recurse, document.createDocumentFragment()); }
    else if (item.nodeType) { child = item; }
    else { child = document.createTextNode(item); }
    node.appendChild(child);
    return node;
  }
#+END_SRC


** Setup
Install [[https://nodejs.org/en/][nodejs]] if you don't have it already.
In this document the versions used are:
- [[https://nodejs.org/en/][nodejs]]: =v8.1.4=
- [[https://www.npmjs.com/][npm]]: =5.3.0=

In an empty directory:
1. Create an npm package:
   #+BEGIN_SRC sh
     npm init --yes
   #+END_SRC

2. Create a directory for the source code:
   #+BEGIN_SRC sh
     mkdir src
   #+END_SRC

3. Install babel:
   #+BEGIN_SRC sh
     npm install --save-dev babel-cli
   #+END_SRC

4. Add a build script to =package.json=:
   #+BEGIN_SRC json
     "scripts": {
       "build": "babel src -d lib"
     }
   #+END_SRC
5. Install /React JSX transform/:
   #+BEGIN_SRC sh
     npm install --save-dev babel-plugin-transform-react-jsx
   #+END_SRC

6. Create =.babelrc= configuration file:
   #+BEGIN_SRC json
     {
       "plugins": ["transform-react-jsx"]
     }
   #+END_SRC
7. Save the sample scripts as =src/sample.js=.
8. Compile the script:
   #+BEGIN_SRC sh
     npm run build
   #+END_SRC


** All together
#+NAME: reader
#+BEGIN_SRC sh :exports result :results code :wrap "src javascript :exports none"
  cat lib/sample.js
#+END_SRC

#+BEGIN_SRC html
  <!doctype html>
  <title>h</title>
  <body>
    <script>
      /** @jsx h */
  
      function h(node, attributes, ...children) {
        if (typeof node === 'function') {
  	return node(attributes, ...children);
        }
  
        let element;
  
        if (typeof node === 'string') {
  	element = document.createElement(node);
        } else if (typeof node.appendChild === 'function') {
  	element = node;
        } else {
  	throw new TypeError('node must be a String or an object that implements appendChild');
        }
  
        if (attributes) {
  	Object.keys(attributes).forEach(k => k === '$' ? Object.assign(element, attributes.$) : element.setAttribute(k, attributes[k]));
        }
  
        return children == null ? element : children.reduce(recurse, element);
      }
  
      function recurse(node, item) {
        let child;
        if (Array.isArray(item)) {
  	child = item.reduce(recurse, document.createDocumentFragment());
        } else if (item.nodeType) {
  	child = item;
        } else {
  	child = document.createTextNode(item);
        }
        node.appendChild(child);
        return node;
      }
  
      function Title(attr, str) {
        return h(
  	'h1',
  	null,
  	str.toUpperCase()
        );
      }
  
      function Author(attr, ...name) {
        return h(
  	'a',
  	{ href: `mailto:${attr.email}` },
  	name
        );
      }
  
      const body = h(
        'header',
        null,
        h(
  	Title,
  	null,
  	'Santa Maradona'
        ),
        h(
  	Author,
  	{ email: 'mano.negra@example.com' },
  	'Mano ',
  	h(
  	  'strong',
  	  null,
  	  'Negra'
  	)
        )
      );
  
      document.body.appendChild(body);
    </script>
  </body>
#+END_SRC

*** Tested on
| Firefox 54 | ✅ |
| Safari 10  | ✅ |
| Chrome 59  | ✅ |

* An =el= function with better ergonomics

#+NAME: define-el
#+BEGIN_SRC js
  function el(node, ...args) {
    let attributes;
    let children;
  
    if (args.length < 1) { return h(node, null); }
    let a = args.shift();
    let b = args;
  
    if (a == null) {
      attributes = null;
      children = b;
    } else if (a.nodeType
  	     || typeof a === 'string'
  	     || typeof a === 'number'
  	     || typeof a === 'boolean') {
      attributes = null;
      children = [a, ...b];
    } else if (Array.isArray(a)) {
      attributes = null;
      children = a;
    } else {
      attributes = a;
      children = b;
    }
    return h(node, attributes, ...children);
  }
#+END_SRC
